import sys
import os

import cv2
import glob
import numpy as np
from matplotlib.patches import Circle

from PyQt5 import QtWidgets, QtGui

from package.gui.guidesign import Ui_MainWindow

from datatest import Data

class DesignerMainWindow(QtWidgets.QMainWindow, Ui_MainWindow, Data):
    """Customization for Qt Designer created window"""

    def __init__(self, parent=None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic5
        self.setupUi(self)

        self.i = None
        self.perc = 100
        self.mins = None

        self.statusbar.showMessage('Ready', 10000)

        # File Menu signals
        self.actionSingle.triggered.connect(self.select_file)
        self.actionDirectory.triggered.connect(self.select_dir)

        # push button signals
        self.pbImageOpen.clicked.connect(self.select_file)
        self.pbUpdate.clicked.connect(self.update_graph)
        self.pbExport.clicked.connect(self.export_image)
        self.pbDirectoryOpen.clicked.connect(self.select_dir)
        self.pbDirectoryExport.clicked.connect(self.select_dir)
        self.pbRun.clicked.connect(self.run_export)

    def select_file(self):
        """opens a file select dialog and plots file"""
        self.statusbar.showMessage('Loading Image', 20000)

        # open file select dialog
        if self.lineEditImage.text() == '' or self.sender().text() == 'Open Image':
            # open the dialog and get the selected file
            file = QtWidgets.QFileDialog.getOpenFileName(self, 'Select Image')
            self.lineEditImage.setText(file[0])
            self.tabWidget.setCurrentIndex(0)

        # try to plot input, raise Error if not an image
        try:
            self.initial_plot()
        except:
            self.statusbar.showMessage('ERROR: File has to be an image. Try JPG or PNG Type.')

    def select_dir(self):
        """opens directory selection dialog"""
        directory = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select directory')
        if self.sender().text() == 'Export':
            self.lineEditDirOut.setText(directory)
        else:
            self.lineEditDirIn.setText(directory)
            self.tabWidget.setCurrentIndex(1)

    def parse_file(self):
        """ initiates image as an object of data class."""
        self.i = Data(self.lineEditImage.text())
        return self.i

    def plot(self, image):
        # clear the Axes
        self.mpl.canvas.ax.clear()
        # plot image
        self.mpl.canvas.ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        self.mpl.canvas.ax.axis('off')
        # force an image redraw
        self.mpl.canvas.draw()
        self.statusbar.clearMessage()

    def initial_plot(self):
        a = self.parse_file()
        self.plot(a.img)

    def update_graph(self):
        self.statusbar.showMessage('update is running...')

        # collect values from user input
        percent= self.sbCrop.value()
        lowsize = self.sbBlob.value()

        if self.cbCircle.isChecked() == True:
            if percent != self.perc:
                self.i.filter(percent, lowsize)
                self.mins = lowsize
                self.perc = percent
            else:
                if lowsize != self.mins:
                    self.i.yellow(self.i.cropped, lowsize)
                    self.mins = lowsize
                else:
                    pass
            self.mpl.canvas.ax.clear()
            number, output, stats, centroids = cv2.connectedComponentsWithStats(self.i.blob[:, :, 0], connectivity=8)
            center = list(zip(centroids[1:, 0].astype(int), centroids[1:, 1].astype(int)))
            radius = stats[1:, 3]

            self.mpl.canvas.ax.imshow(cv2.cvtColor(self.i.cropped, cv2.COLOR_BGR2RGB))
            self.mpl.canvas.ax.axis("off")
            counter = 0
            for i in range(centroids[1:, 1].shape[0]):
                circ = Circle(center[i], radius[i], color="r", linewidth=1, fill=False)
                self.mpl.canvas.ax.add_patch(circ)
                counter += 1
            self.mpl.canvas.draw()
            self.statusbar.showMessage('{} Flowers counted.'.format(counter))


        elif self.cbYellow.isChecked() == True:
            if percent != self.perc:
                self.i.filter(percent, lowsize)
                self.mins = lowsize
                self.perc = percent
            else:
                if lowsize != self.mins:
                    self.i.yellow(self.i.cropped, lowsize)
                    self.mins = lowsize
                else:
                    pass
            self.plot(self.i.blob)

        else:
            if percent == self.perc:
                self.plot(self.i.cropped)
            else:
                self.perc = percent
                self.i.crop(self.perc)
                self.plot(self.i.cropped)

    def export_image(self):
        self.statusbar.showMessage('Export is running...')
        #a = self.parse_file()

        # collect values from user input
        percent= self.sbCrop.value()
        lowsize = self.sbBlob.value()

        try:
            saveas = QtWidgets.QFileDialog.getSaveFileName(self, 'Save as')[0]
        except:
            self.statusbar.showMessage('Export failed, try again.')

        if self.cbCircle.isChecked() == True:
            if percent != self.perc:
                self.i.filter(percent, lowsize)
                self.mins = lowsize
                self.perc = percent
            else:
                if lowsize != self.mins:
                    self.i.yellow(self.i.cropped, lowsize)
                    self.mins = lowsize
                else:
                    try:
                        self.mpl.canvas.fig.savefig(saveas)
                        #self.mpl.canvas.fig.savefig(saveas, dpi=300)
                    except:
                        self.statusbar.showMessage('Figsave not working.')

            self.mpl.canvas.ax.clear()
            number, output, stats, centroids = cv2.connectedComponentsWithStats(self.i.blob[:, :, 0], connectivity=8)
            center = list(zip(centroids[1:, 0].astype(int), centroids[1:, 1].astype(int)))
            radius = stats[1:, 3]

            self.mpl.canvas.ax.imshow(cv2.cvtColor(self.i.cropped, cv2.COLOR_BGR2RGB))
            self.mpl.canvas.ax.axis("off")
            counter = 0
            for i in range(centroids[1:, 1].shape[0]):
                circ = Circle(center[i], radius[i], color="r", linewidth=1, fill=False)
                self.mpl.canvas.ax.add_patch(circ)
                counter += 1
            #self.mpl.canvas.draw()
            self.statusbar.showMessage('{} Flowers counted.'.format(counter))

            try:
                self.mpl.canvas.fig.savefig(saveas)
                #self.ntb.save_figure(saveas)
                #self.mpl.canvas.fig.savefig(saveas, dpi=300)
                #self.mpl.canvas.ax.figure.savefig(saveas)
                #self.mpl.canvas.fig.savefig(saveas, dpi=300)
                #cv2.imwrite(saveas, self.i.blob)
            except:
                self.statusbar.showMessage("ERROR: Not a valid file name. File type has to be JPG or PNG.")
            else:
                self.statusbar.clearMessage()

        if self.cbYellow.isChecked() == True:
            if percent != self.perc:
                self.i.filter(percent, lowsize)
                self.mins = lowsize
                self.perc = percent
            else:
                if lowsize != self.mins:
                    self.i.yellow(self.i.cropped, lowsize)
                    self.mins = lowsize
                else:
                    pass
            try:
                cv2.imwrite(saveas, self.i.blob)
            except:
                self.statusbar.showMessage("ERROR: Not a valid file name. File type has to be JPG or PNG.")
            else:
                self.statusbar.clearMessage()
        else:
            if percent == self.perc:
                pass
            else:
                self.perc = percent
                self.i.crop(self.perc)
            try:
                cv2.imwrite(saveas, self.i.cropped)
            except:
                self.statusbar.showMessage("ERROR: Not a valid file name. File type has to be JPG or PNG.")
            else:
                self.statusbar.clearMessage()

    def run_export(self):
        # list of images
        path = self.lineEditDirIn.text() + '/*.*'
        paths = glob.glob(path)

        # create output directory if necessary
        outputdir = self.lineEditDirOut.text() + '/'
        os.makedirs(outputdir, exist_ok= True)

        # set value of progressbar
        self.completed = 0
        self.total = len(paths)

        # collect values from user input
        percent = self.sbCropDir.value()
        lowsize = self.sbBlobDir.value()

        if self.cbYellowDir.isChecked() == True:
            for imagepath in paths:
                self.i = Data(imagepath)
                self.i.filter(percent, lowsize)
                outpath = outputdir + self.i.name + 'seg' + str(lowsize) + '.png'
                cv2.imwrite(outpath, self.i.blob)
                if self.completed < 100:
                    self.completed += 100/self.total
                    self.progressBar.setValue(self.completed)
        else:
            for imagepath in paths:
                self.i = Data(imagepath)
                self.i.crop(percent)
                outpath = outputdir + self.i.name + 'crop' + str(percent) + '.png'
                cv2.imwrite(outpath, self.i.cropped)
                if self.completed < 100:
                    self.completed += 100/self.total
                    self.progressBar.setValue(self.completed)



# create the GUI application
app = QtWidgets.QApplication(sys.argv)
# instantiate the main window
dmw = DesignerMainWindow()
# show it
dmw.show()
# start the Qt main loop execution, exiting from this script
# with the same return code of Qt application
sys.exit(app.exec_())

