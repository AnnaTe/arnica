import sys
import os

import cv2
import glob
import numpy as np
from matplotlib.patches import Circle

from PyQt5 import QtWidgets

from gui.guidesign import Ui_MainWindow

from datatest import Data

class DesignerMainWindow(QtWidgets.QMainWindow, Ui_MainWindow, Data):
    """Customization for Qt Designer created window"""

    def __init__(self, parent=None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic5
        self.setupUi(self)

        self.i = None
        self.perc = 100
        self.mins = None

        self.statusbar.showMessage('Ready', 10000)

        # File Menu signals
        self.actionSingle.triggered.connect(self.select_file)
        self.actionDirectory.triggered.connect(self.select_dir)

        # push button signals
        self.pbImageOpen.clicked.connect(self.select_file)
        self.pbUpdate.clicked.connect(self.update_graph)
        self.pbExport.clicked.connect(self.export_image)
        self.pbDirectoryOpen.clicked.connect(self.select_dir)
        self.pbDirectoryExport.clicked.connect(self.select_dir)
        self.pbRun.clicked.connect(self.run_export)

    def select_file(self):
        """opens a file select dialog and plots file"""
        self.statusbar.showMessage('Loading Image', 20000)

        # open file select dialog
        if self.lineEditImage.text() == '' or self.sender().text() == 'Open Image':
            # open the dialog and get the selected file
            file = QtWidgets.QFileDialog.getOpenFileName(self, 'Select Image')
            self.lineEditImage.setText(file[0])
            self.tabWidget.setCurrentIndex(0)

        # try to plot input, raise Error if not an image
        try:
            self.initial_plot()
            self.perc = 100
            self.mins = None
        except:
            self.statusbar.showMessage('ERROR: File has to be an image. Try JPG or PNG Type.')

    def select_dir(self):
        """opens directory selection dialog"""
        directory = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select directory')
        if self.sender().text() == 'Export':
            self.lineEditDirOut.setText(directory)
        else:
            self.lineEditDirIn.setText(directory)
            self.tabWidget.setCurrentIndex(1)

    def parse_file(self):
        """ initiates image as an object of data class."""
        self.i = Data(self.lineEditImage.text())
        return self.i

    def plot(self, image):
        # clear the Axes
        self.mpl.canvas.ax.clear()
        # plot image
        self.mpl.canvas.ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        self.mpl.canvas.ax.axis('off')
        # force an image redraw
        self.mpl.canvas.draw()
        self.statusbar.clearMessage()

    def initial_plot(self):
        a = self.parse_file()
        self.plot(a.img)

    def update_graph(self):
        self.statusbar.showMessage('update is running...')

        # collect values from user input
        percent= self.sbCrop.value()
        lowsize = self.sbBlob.value()

        if self.cbCircle.isChecked() == True:
            if percent != self.perc:
                self.i.filter(percent, lowsize)
                self.mins = lowsize
                self.perc = percent
            else:
                if lowsize != self.mins:
                    self.i.yellow(self.i.cropped, lowsize)
                    self.mins = lowsize
                else:
                    pass
            self.mpl.canvas.ax.clear()
            number, output, stats, centroids = cv2.connectedComponentsWithStats(self.i.blob[:, :, 0], connectivity=8)
            nb_components = number - 1
            left = stats[1:, 0]
            top = stats[1:, 1]
            width = stats[1:, 2]
            height = stats[1:, 3]
            sizes = stats[1:, 4]

            center = np.array((centroids[1:, 0].astype(int), centroids[1:, 1].astype(int))).transpose()

            lowsize = np.mean(sizes) * 2
            centers = []
            radius = []
            for i in range(0, nb_components):
                if sizes[i] >= lowsize:
                    if width[i] / height[i] >= 0.75 and width[i] / height[i] < 1.5:
                        pass
                    elif width[i] / height[i] < 0.75 and width[i] / height[i] >= 0.415:
                        center[i] = np.array([(width[i] / 2) + left[i], (height[i] / 4) + top[i]])
                        centers.append([(width[i] / 2) + left[i], (height[i] / 4) * 3 + top[i]])
                        radius.append(np.min((width[i], height[i])))
                    elif width[i] / height[i] < 2.5 and width[i] / height[i] >= 1.5:
                        center[i] = np.array([(width[i] / 4) + left[i], (height[i] / 2) + top[i]])
                        centers.append([(width[i] / 4) * 3 + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                    elif width[i] / height[i] >= 2.5 and width[i] / height[i] < 3.5:
                        centers.append([(width[i] / 4) + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 4) * 3 + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                    elif width[i] / height[i] < 0.415 and width[i] / height[i] >= 0.29:
                        centers.append([(width[i] / 2) + left[i], (height[i] / 4) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 2) + left[i], (height[i] / 4) * 3 + top[i]])
                        radius.append(np.min((width[i], height[i])))
                    elif width[i] / height[i] < 0.29 and width[i] / height[i] >= 0.225:
                        center[i] = np.array([(width[i] / 2) + left[i], (height[i] / 5) + top[i]])
                        centers.append([(width[i] / 2) + left[i], (height[i] / 5) * 2 + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 2) + left[i], (height[i] / 5) * 3 + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 2) + left[i], (height[i] / 5) * 4 + top[i]])
                        radius.append(np.min((width[i], height[i])))
                    elif width[i] / height[i] >= 3.5 and width[i] / height[i] < 4.5:
                        center[i] = np.array([(width[i] / 5) + left[i], (height[i] / 2) + top[i]])
                        centers.append([(width[i] / 5) * 2 + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 5) * 3 + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 5) * 4 + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                    elif width[i] / height[i] < 0.225:
                        centers.append([(width[i] / 2) + left[i], (height[i] / 6) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 2) + left[i], (height[i] / 6) * 2 + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 2) + left[i], (height[i] / 6) * 4 + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 2) + left[i], (height[i] / 6) * 5 + top[i]])
                        radius.append(np.min((width[i], height[i])))
                    elif width[i] / height[i] >= 4.5:
                        centers.append([(width[i] / 6) + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 6) * 2 + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 6) * 5 + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))
                        centers.append([(width[i] / 6) * 4 + left[i], (height[i] / 2) + top[i]])
                        radius.append(np.min((width[i], height[i])))

            self.mpl.canvas.ax.imshow(cv2.cvtColor(self.i.cropped, cv2.COLOR_BGR2RGB))
            self.mpl.canvas.ax.axis("off")
            count = 0
            count1 = 0
            for i in range(centroids[1:, 1].shape[0]):
                circ = Circle(tuple(center[i]), np.min(stats[i + 1, 2:4]), color="r", linewidth=0.5, fill=False)
                self.mpl.canvas.ax.add_patch(circ)
                count += 1
            for a in range(len(centers)):
                circ2 = Circle(tuple(centers[a]), int(radius[a]), color="b", linewidth=0.5, fill=False)
                self.mpl.canvas.ax.add_patch(circ2)
                count1 += 1
            self.mpl.canvas.draw()
            self.statusbar.showMessage('{} Flowers counted. {} blue'.format(count, count1))


        elif self.cbYellow.isChecked() == True:
            if percent != self.perc:
                self.i.filter(percent, lowsize)
                self.mins = lowsize
                self.perc = percent
            else:
                if lowsize != self.mins:
                    self.i.yellow(self.i.cropped, lowsize)
                    self.mins = lowsize
                else:
                    pass
            self.plot(self.i.blob)

        else:
            if percent == self.perc:
                self.plot(self.i.cropped)
            else:
                self.perc = percent
                self.i.crop(self.perc)
                self.plot(self.i.cropped)

    def export_image(self):
        self.statusbar.showMessage('Export is running...')

        # collect values from user input
        percent= self.sbCrop.value()
        lowsize = self.sbBlob.value()

        if self.cbCircle.isChecked() == True:
            if percent == self.perc and lowsize == self.mins:
                try:
                    self.mpl.ntb.save_figure()
                except:
                    self.statusbar.showMessage('Figsave not working.')
            else:
                if percent != self.perc:
                    self.i.filter(percent, lowsize)
                    self.mins = lowsize
                    self.perc = percent
                else:
                    self.i.yellow(self.i.cropped, lowsize)
                    self.mins = lowsize

                #self.mpl.canvas.ax.clear()
                number, output, stats, centroids = cv2.connectedComponentsWithStats(self.i.blob[:, :, 0], connectivity=8)
                center = list(zip(centroids[1:, 0].astype(int), centroids[1:, 1].astype(int)))
                radius = stats[1:, 3]
                image = np.copy(self.i.cropped)

                counter = 0
                for i in range(centroids[1:, 1].shape[0]):
                    cv2.circle(image, center[i], radius[i], color = (0, 0, 255), thickness = 3)
                    #circ = Circle(center[i], radius[i], color="k", linewidth=0.5, fill=False)
                    #self.mpl.canvas.ax.add_patch(circ)
                    counter += 1

                self.plot(image)
                self.mpl.ntb.save_figure()
                self.statusbar.showMessage('{} Flowers counted.'.format(counter))

        elif self.cbYellow.isChecked() == True:
            try:
                saveas = QtWidgets.QFileDialog.getSaveFileName(self, 'Save as')[0]
            except:
                self.statusbar.showMessage('Export failed, try again.')
            if percent != self.perc:
                self.i.filter(percent, lowsize)
                self.mins = lowsize
                self.perc = percent
            else:
                if lowsize != self.mins:
                    self.i.yellow(self.i.cropped, lowsize)
                    self.mins = lowsize
                else:
                    pass
            try:
                cv2.imwrite(saveas, self.i.blob)
            except:
                self.statusbar.showMessage("ERROR: Not a valid file name. File type has to be JPG or PNG.")
            else:
                self.statusbar.clearMessage()
        else:
            try:
                saveas = QtWidgets.QFileDialog.getSaveFileName(self, 'Save as')[0]
            except:
                self.statusbar.showMessage('Export failed, try again.')
            if percent == self.perc:
                pass
            else:
                self.perc = percent
                self.i.crop(self.perc)
            try:
                cv2.imwrite(saveas, self.i.cropped)
            except:
                self.statusbar.showMessage("ERROR: Not a valid file name. File type has to be JPG or PNG.")
            else:
                self.statusbar.clearMessage()

    def run_export(self):
        self.statusbar.showMessage('Export is running...')

        # list of images
        path = self.lineEditDirIn.text() + '/*.*'
        paths = glob.glob(path)

        # create output directory if necessary
        outputdir = self.lineEditDirOut.text() + '/'
        os.makedirs(outputdir, exist_ok= True)

        # set value of progressbar
        self.completed = 0
        self.total = len(paths)

        # collect values from user input
        percent = self.sbCropDir.value()
        lowsize = self.sbBlobDir.value()

        if self.cbYellowDir.isChecked() == True:
            for imagepath in paths:
                self.i = Data(imagepath)
                try:
                    self.i.filter(percent, lowsize)
                except:
                    self.statusbar.showMessage("ERROR: Images in import directory not found. Try again.")
                outpath = outputdir + self.i.name + 'seg' + str(lowsize) + '.png'
                cv2.imwrite(outpath, self.i.blob)
                self.completed += 1
                self.statusbar.showMessage("Running: {} of {} image exported.".format(self.completed, self.total))
        else:
            for imagepath in paths:
                self.i = Data(imagepath)
                self.i.crop(percent)
                outpath = outputdir + self.i.name + 'crop' + str(percent) + '.png'
                cv2.imwrite(outpath, self.i.cropped)
                self.completed += 1
                self.statusbar.showMessage("Running: {} of {} image exported.".format(self.completed, self.total))
        self.statusbar.showMessage("Process finished.", 500)



# create the GUI application
app = QtWidgets.QApplication(sys.argv)
# instantiate the main window
dmw = DesignerMainWindow()
# show it
dmw.show()
# start the Qt main loop execution, exiting from this script
# with the same return code of Qt application
sys.exit(app.exec_())

