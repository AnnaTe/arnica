import sys
import os

import cv2
import glob

from PyQt5 import QtWidgets, QtGui

from package.gui.guidesign import Ui_MainWindow

from filter.data import Data



class DesignerMainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""

    def __init__(self, parent=None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic5
        self.setupUi(self)

        # File Menu signals
        self.actionSingle.triggered.connect(self.select_file)
        self.actionDirectory.triggered.connect(self.select_dir)

        # QtCore.QObject.connect(self.mplactionQuit, QtCore.SIGNAL('triggered()'), QtGui.qApp, QtCore.SLOT("quit()"))

        # push button signals
        self.pbImageOpen.clicked.connect(self.initial_plot)
        self.pbUpdate.clicked.connect(self.update_graph)
        self.pbExport.clicked.connect(self.export_image)
        self.pbDirectoryOpen.clicked.connect(self.select_dir)
        self.pbDirectoryExport.clicked.connect(self.select_dir)
        self.pbRun.clicked.connect(self.run_export)

    def select_file(self):
         """opens a file select dialog"""
         # open the dialog and get the selected file
         file = QtWidgets.QFileDialog.getOpenFileName(self, 'Select Image')
         # update the lineEdit widget text with the selected filename
         self.lineEditImage.setText(file[0])
         self.tabWidget.setCurrentIndex(0)

    def select_dir(self):
        directory = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select directory')
        if self.sender().text() == 'Export':
            self.lineEditDirOut.setText(directory)
        else:
            self.lineEditDirIn.setText(directory)
            self.tabWidget.setCurrentIndex(1)

    def parse_file(self, filename):
        ' initiates image as an object of data class. '
        a = Data(filename)
        return a

    def plot(self, image):
        # clear the Axes
        self.mpl.canvas.ax.clear()

        self.mpl.canvas.ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        self.mpl.canvas.ax.axis('off')
        # self.mpl.canvas.ax.set_title('Image Plot', fontsize=16)
        # force an image redraw
        self.mpl.canvas.draw()

    def initial_plot(self):
        a = self.parse_file(self.lineEditImage.text())
        self.plot(a.img)

    def update_graph(self):
        a = self.parse_file(self.lineEditImage.text())

        # collect values from user input
        percent= self.sbCrop.value()
        lowsize = self.sbBlob.value()

        if self.cbYellow.isChecked() == True:
            # apply filter
            a.filter(percent, lowsize)
            # plot result
            self.plot(a.blob)
        else:
            a.crop(percent)
            self.plot(a.cropped)

    def export_image(self):
        a = self.parse_file(self.lineEditImage.text())

        # collect values from user input
        percent= self.sbCrop.value()
        lowsize = self.sbBlob.value()

        saveas = QtWidgets.QFileDialog.getSaveFileName(self, 'Save as')[0]

        if self.cbYellow.isChecked() == True:
            # apply filter
            a.filter(percent, lowsize)
            # plot result
            cv2.imwrite(saveas, a.blob)
        else:
            a.crop(percent)
            cv2.imwrite(saveas, a.cropped)


    def run_export(self):
        # list of images
        path = self.lineEditDirIn.text() + '/*.*'
        paths = glob.glob(path)

        # create output directory if necessary
        outputdir = self.lineEditDirOut.text() + '/'
        os.makedirs(outputdir, exist_ok= True)

        # set value of progressbar
        self.completed = 0
        self.total = len(paths)

        # collect values from user input
        percent = self.sbCropDir.value()
        lowsize = self.sbBlobDir.value()

        if self.cbYellowDir.isChecked() == True:
            for imagepath in paths:
                a = self.parse_file(imagepath)
                a.filter(percent, lowsize)
                outpath = outputdir + a.name + 'seg' + str(lowsize) + '.png'
                cv2.imwrite(outpath, a.blob)
                if self.completed < 100:
                    self.completed += 100/self.total
                    self.progressBar.setValue(self.completed)
        else:
            for imagepath in paths:
                a = self.parse_file(imagepath)
                a.crop(percent)
                outpath = outputdir+ a.name + 'crop' + str(percent) + '.png'
                cv2.imwrite(outpath, a.cropped)
                if self.completed < 100:
                    self.completed += 100/self.total
                    self.progressBar.setValue(self.completed)
        # ...same for deadflowers checkbox



# create the GUI application
app = QtWidgets.QApplication(sys.argv)
# instantiate the main window
dmw = DesignerMainWindow()
# show it
dmw.show()
# start the Qt main loop execution, exiting from this script
# with the same return code of Qt application
sys.exit(app.exec_())

