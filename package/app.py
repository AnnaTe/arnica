import sys

import cv2

from PyQt5 import QtWidgets, QtGui

from package.gui.guidesign import  Ui_MainWindow
from filter.openfiles import Crop
from filter.colorsegmentation import Yellow
from filter.blobelimination import BlobDetection, applyMask


class DesignerMainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""

    def __init__(self, parent=None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic5
        self.setupUi(self)

        # connect the signals with the slots
        self.actionSingle.triggered.connect(self.select_file)
        self.actionDirectory.triggered.connect(self.select_dir)
        self.pbDirectoryOpen.clicked(self.select_dir)

        # QtCore.QObject.connect(self.mplactionQuit, QtCore.SIGNAL('triggered()'), QtGui.qApp, QtCore.SLOT("quit()"))

        # connect signals with slots
        self.pbImageOpen.clicked.connect(self.initial_plot)
        self.pbUpdate.clicked.connect(self.update_graph)


    #
    def select_file(self):
         """opens a file select dialog"""
         # open the dialog and get the selected file
         file = QtWidgets.QFileDialog.getOpenFileName(self, 'Select Image')
         # update the lineEdit widget text with the selected filename
         self.lineEditImage.setText(file[0])
         self.tabWidget.setCurrentIndex(0)


    def select_dir(self):
        directory = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select directory')
        self.lineEditDirIn.setText(directory)
        self.tabWidget.setCurrentIndex(1)

    def parse_file(self, filename):
        """Function to parse an image file to display"""
        img = cv2.imread(filename)

        return img

    def plot(self, image):
        # clear the Axes
        self.mpl.canvas.ax.clear()

        self.mpl.canvas.ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        self.mpl.canvas.ax.axis('off')
        # self.mpl.canvas.ax.set_title('Image Plot', fontsize=16)
        # force an image redraw
        self.mpl.canvas.draw()

    def crop_image(self, img):
        percent = self.sbCrop.value()

        if percent == 100:
            return img
        elif percent == 0:
            print("Imagesize can't be 0 %.")
            return img
        else:
            image = Crop(img, percent)
            return image

    def colorseg(self, img):
        if self.cbYellow.isChecked():
            # call function colorsegmentation
            image = Yellow(img)
            return image
        else:
           return img

    def blobsize(self, img):
        #call blobelimination
        minsize = self.sbBlob.value()
        out = BlobDetection(img, minsize)
        image = applyMask(out, img)
        return image

    def initial_plot(self):
        image = self.parse_file(self.lineEditImage.text())
        self.plot(image)

    def update_graph(self):
        ## updated image function
        # opens image from source
        image = self.parse_file(self.lineEditImage.text())

        # call of functions
        img = self.crop_image(image)
        img = self.colorseg(img)
        img = self.blobsize(img)

        self.plot(img)


# create the GUI application
app = QtWidgets.QApplication(sys.argv)
# instantiate the main window
dmw = DesignerMainWindow()
# show it
dmw.show()
# start the Qt main loop execution, exiting from this script
# with the same return code of Qt application
sys.exit(app.exec_())
